 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/references", type: :request do
  # Reference. As you add validations to Reference, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:reference)
  }

  let(:invalid_attributes) {
    { name: nil }
  }

  before(:each) do
    login_admin
  end

  describe "GET /index" do
    it "renders a successful response" do
      Reference.create! valid_attributes
      get references_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      reference = Reference.create! valid_attributes
      get reference_url(reference)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_reference_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      reference = Reference.create! valid_attributes
      get edit_reference_url(reference)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Reference" do
        expect {
          post references_url, params: { reference: valid_attributes }
        }.to change(Reference, :count).by(1)
      end

      it "redirects to the created reference" do
        post references_url, params: { reference: valid_attributes }
        expect(response).to redirect_to(reference_url(Reference.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Reference" do
        expect {
          post references_url, params: { reference: invalid_attributes }
        }.to change(Reference, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post references_url, params: { reference: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {{
        name: "DontDoIt",
        url: "http://just.another.url/"
      }}

      it "updates the requested reference" do
        reference = Reference.create! valid_attributes
        patch reference_url(reference), params: { reference: new_attributes }
        reference.reload
        expect(reference.name).to eq("DontDoIt")
        expect(reference.url).to eq("http://just.another.url/")
      end

      it "redirects to the reference" do
        reference = Reference.create! valid_attributes
        patch reference_url(reference), params: { reference: new_attributes }
        reference.reload
        expect(response).to redirect_to(reference_url(reference))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        reference = Reference.create! valid_attributes
        patch reference_url(reference), params: { reference: invalid_attributes }
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested reference" do
      reference = Reference.create! valid_attributes
      expect {
        delete reference_url(reference)
      }.to change(Reference, :count).by(-1)
    end

    it "redirects to the references list" do
      reference = Reference.create! valid_attributes
      delete reference_url(reference)
      expect(response).to redirect_to(references_url)
    end
  end
end
